t1 %>% select(" " = "x", Estimate, "SE" = "Std..Error","P" =  "Pr...z..")
t1 %>% select("y" = "x", Estimate, "SE" = "Std..Error","P" =  "Pr...z..")
t1 %>% select(y = "x", Estimate, "SE" = "Std..Error","P" =  "Pr...z..")
rm(list=ls())
#Load knitr
library(knitr)
#Set some options
options(na.action='na.fail')
opts_knit$set(root.dir = '..')
opts_chunk$set(echo=FALSE,
warning=FALSE,
message=FALSE,
fig.width=5,
fig.height=4)
set.seed(181219)
#Load and clean data
source("Scripts/TriboliumSexCol_LOAD.R")
source("Scripts/TriboliumSexCol_FUNCTIONS.r")
source("Scripts/TriboliumSexCol_CLEAN.r")
source("Scripts/TriboliumSexCol_MODELS.r")
t1 <- summary(poplin)$coefficients %>%
data.frame() %>%
rbind(summary(poplinint)$coefficients["TreatmentPolyandrous:as.numeric(Generation)",]) %>%
rownames_to_column("x") %>%
mutate(x = replace(x, x %in% c( "TreatmentPolyandrous","as.numeric(Generation)","4"),c("Treatment","Generation","Treatment x Generation"))) %>%
select("y" = "x", Estimate, "SE" = "Std..Error","P" =  "Pr...z..") %>%
mutate(P = sapply(P,round3)) %>%
kable(digits = 3)
t1 <- summary(poplin)$coefficients %>%
data.frame() %>%
rbind(summary(poplinint)$coefficients["TreatmentPolyandrous:as.numeric(Generation)",]) %>%
rownames_to_column("x") %>%
mutate(x = replace(x, x %in% c( "TreatmentPolyandrous","as.numeric(Generation)","4"),c("Treatment","Generation","Treatment x Generation"))) %>%
dplyr::select("y" = "x", Estimate, "SE" = "Std..Error","P" =  "Pr...z..") %>%
mutate(P = sapply(P,round3)) %>%
kable(digits = 3)
t1
t1 <- summary(poplin)$coefficients %>%
data.frame() %>%
rbind(summary(poplinint)$coefficients["TreatmentPolyandrous:as.numeric(Generation)",]) %>%
rownames_to_column("x") %>%
mutate(x = replace(x, x %in% c( "TreatmentPolyandrous","as.numeric(Generation)","4"),c("Treatment","Generation","Treatment x Generation"))) %>%
dplyr::select(" " = "x", Estimate, "SE" = "Std..Error","P" =  "Pr...z..") %>%
mutate(P = sapply(P,round3)) %>%
kable(digits = 3)
t1
summary(poplin)
citation(glmmADMB)
citation("glmmADMB")
toBibtex(citation("glmmADMB"))
summary(pop10)$coefficients
overdisp_fun(pop10)
?glm
?glmmadmb
library(MASS)
pop10 <- glm.nb(Offspring_Gen10~Treatment,data=dd10)
overdisp_fun(pop10)
summary(pop10)
round3(summary(pop10)$coefficients["TreatmentPolyandrous","Pr(>|z|)"])
toBibtex(citation("MASS"))
FigA <- ddlong %>%
drop_na() %>%
group_by(Generation, Treatment) %>%
summarise(Extant = mean(Offspring > 0)) %>%
ggplot(aes(x = Generation, y = Extant, col = Treatment))+
geom_line(aes(group = Treatment))+
ylab("Proportion of populations surviving")+
scale_colour_manual(values = mycols)+
theme(legend.position = "none")
FigB <- ddm %>%
ggplot(aes(x = Generation,y = Offspring,col = Treatment)) +
geom_line(aes(group = ID),alpha = 0.2)+
geom_smooth(aes(x = as.numeric(Generation)),method = "glm",method.args = list(family = "poisson")) +
ylab("Number of adults")+
theme(legend.position = "none")+
scale_colour_manual(values = mycols)
plots <- plot_grid(FigA, FigB, labels = "AUTO")
legend_b <- get_legend(
FigA +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
)
plot_grid(legend_b, plots, ncol = 1, rel_heights = c(0.1, 1))
FigA <- ddlong %>%
drop_na() %>%
group_by(Generation, Treatment) %>%
summarise(Extant = mean(Offspring > 0)) %>%
ggplot(aes(x = Generation, y = Extant, col = Treatment))+
geom_line(aes(group = Treatment))+
ylab("Proportion of populations surviving")+
scale_colour_manual(values = mycols)+
theme(legend.position = "none")
FigB <- ddm %>%
ggplot(aes(x = Generation,y = Offspring,col = Treatment)) +
geom_line(aes(group = ID),alpha = 0.2)+
geom_smooth(aes(x = as.numeric(Generation)),method = "glm.nb",se = T) +
ylab("Number of adults")+
theme(legend.position = "none")+
scale_colour_manual(values = mycols)
plots <- plot_grid(FigA, FigB, labels = "AUTO")
legend_b <- get_legend(
FigA +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
)
plot_grid(legend_b, plots, ncol = 1, rel_heights = c(0.1, 1))
FigB
round3(summary(popfac)$coefficients["TreatmentPolyandrous","Pr(>|z|)"])
round3(summary(poppoly)$coefficients["TreatmentPolyandrous","Pr(>|z|)"])
round3(summary(pop10)$coefficients["TreatmentPolyandrous","Pr(>|z|)"])
Fig <- ddlong %>%
ggplot(aes(x = Generation,y = Offspring,fill = Treatment)) +
geom_boxplot()+
scale_fill_manual(values = mycols)+
ylab("Number of adults")+
theme(legend.position = "top")
Fig
paste("Gen",c(2:10),collapse = "|")
x1 <- dd[,!grepl(paste0("Gen",c(2:10),collapse = "|"),colnames(dd))]
x1
x1 <- dd[,!grepl("Gen1$",colnames(dd))]
x1
paste0("Gen",c(1:9),"$",collapse = "|")
x1 <- dd[,grepl(paste0("Gen",c(1:9),"$",collapse = "|"),colnames(dd))]
x1
x2 <- dd[,grepl(paste0("Gen",c(2:10),"$",collapse = "|"),colnames(dd))]
x2-x1
dd
ch <- cbind(dd[,c("ID","Treatment")],x2-x1)
ch
ch <- cbind(dd[,c("ID","Treatment")],x2-x1) %>%
gather(key = Generation, value = Offspring, paste0("Offspring_Gen",c(2:10))) %>%
mutate(Generation = str_split(Generation, "Gen",simplify = T)[,2])
ch$Generation <- factor(ch$Generation, levels = as.character(c(2:10)))
summary(glm(Offspring~Generation+Treatment,data=ch,family = "poisson"))
summary(lm(Offspring~Generation+Treatment,data=ch))
summary(lm(Offspring~as.numeric(Generation)+Treatment,data=ch))
summary(glm(abs(Offspring)~as.numeric(Generation)+Treatment,data=ch,family = "poisson"))
summary(glm.nb(abs(Offspring)~as.numeric(Generation)+Treatment,data=ch))
boxplot(abs(Offspring)~Treatment,data=ch)
boxplot(abs(Offspring)~Treatment,data=ch,notch=T)
round(nrow(filter(dd,Offspring_Gen1 == 0, Treatment == "Monogamous"))/nrow(filter(dd,Treatment == "Monogamous"))*100)
round((nrow(filter(dd,Offspring_Gen1 == 0, Treatment == "Monogamous"))/nrow(filter(dd,Treatment == "Monogamous"))^2)*100)
round2((nrow(filter(dd,Offspring_Gen1 == 0, Treatment == "Monogamous"))/nrow(filter(dd,Treatment == "Monogamous"))^2)*100)
0.11*0.11
nrow(filter(dd,Offspring_Gen1 == 0, Treatment == "Monogamous"))/nrow(filter(dd,Treatment == "Monogamous"))
(nrow(filter(dd,Offspring_Gen1 == 0, Treatment == "Monogamous"))/nrow(filter(dd,Treatment == "Monogamous"))^2)
0.1132075&2
0.1132075^2
round((nrow(filter(dd,Offspring_Gen1 == 0, Treatment == "Monogamous"))/nrow(filter(dd,Treatment == "Monogamous")))^2*100)
round2((nrow(filter(dd,Offspring_Gen1 == 0, Treatment == "Monogamous"))/nrow(filter(dd,Treatment == "Monogamous")))^2*100)
pop1 <- glm.nb(Offspring_Gen1~Treatment,data=dd1)
summary(pop1)
round3(summary(pop10$coefficients["TreatmentPolyandrous","Pr(>|z|)"])
)
round3(summary(pop10$coefficients)["TreatmentPolyandrous","Pr(>|z|)"])
summary(pop1$coefficients)
summary(pop1)$coefficients
round3(summary(pop1)$coefficients["TreatmentPolyandrous","Pr(>|z|)"])
round3(summary(pop10)$coefficients["TreatmentPolyandrous","Pr(>|z|)"])
library(tidyverse)
library(cowplot)
library(survival)
library(lme4)
library(glmmADMB)
library(MASS)
?glmmadmb
library(tidyverse)
library(cowplot)
library(survival)
library(lme4)
library(glmmADMB)
library(MASS)
# Run if data updated on google sheets ------------------------------------
# library(googledrive)
# library(googlesheets4)
# temp <- drive_get("Tribolium_MoPo_Colonisation") %>%
#   read_sheet()
# write_csv(temp,"Data/Tribolium_MoPo_Colonisation.csv")
# rm(temp)
# Load data ---------------------------------------------------------------
dd <- read_csv("Data/Tribolium_MoPo_Colonisation.csv")
# Get rid of missing populations ------------------------------------------
dd <- dd[complete.cases(dd),]
dd$ID <- factor(dd$ID)
# Define number of generations --------------------------------------------
ngens <- length(grep("Offspring",colnames(dd)))
# Create and set a theme --------------------------------------------------
theme_lgs <- theme_bw()
theme_set(theme_lgs)
mycols <- c("dodgerblue3","darkorange")
# Generate long data frame ------------------------------------------------
ddlong <- dd%>%
gather(key = Generation, value = Offspring, paste0("Offspring_Gen",c(1:ngens))) %>%
mutate(Generation = str_split(Generation, "Gen",simplify = T)[,2])
ddlong$Generation <- factor(ddlong$Generation, levels = as.character(c(1:10)))
# Survival ----------------------------------------------------------------
temp <- dd
temp$Offspring_Gen11 <- 0
temp$SurvivalTime <- NA
for(i in 1:nrow(temp))
{
temp$SurvivalTime[i] <- min(which(temp[i,] == 0))-5
}
dd$Cens <- ifelse(temp$SurvivalTime == 11,0,1)
dd$SurvTime <- temp$SurvivalTime
temp <- NULL
# Subset removing first gen extinctions -----------------------------------
ddm <- filter(ddlong,Offspring > 0)
dd1 <- filter(dd,Offspring_Gen1 > 0)
dd10 <- filter(dd,Offspring_Gen10 > 0)
ddlong$RID <- c(1:nrow(ddlong))
ddm$RID <- c(1:nrow(ddm))
# Rates of change ---------------------------------------------------------
x1 <- dd[,grepl(paste0("Gen",c(1:9),"$",collapse = "|"),colnames(dd))]
x2 <- dd[,grepl(paste0("Gen",c(2:10),"$",collapse = "|"),colnames(dd))]
ch <- cbind(dd[,c("ID","Treatment")],x2-x1) %>%
gather(key = Generation, value = Offspring, paste0("Offspring_Gen",c(2:10))) %>%
mutate(Generation = str_split(Generation, "Gen",simplify = T)[,2])
ch$Generation <- factor(ch$Generation, levels = as.character(c(2:10)))
poplin
survall <- coxph(Surv(time = dd$SurvTime,event = dd$Cens)~Treatment,data=dd)
surv1 <- coxph(Surv(time = dd1$SurvTime,event = dd1$Cens)~Treatment,data=dd1)
poplin <- glmmadmb(Offspring~Treatment  + as.numeric(Generation), random = ~1|ID, data=ddm,family = "nbinom")
poplinint <- glmmadmb(Offspring~Treatment  * as.numeric(Generation), random = ~1|ID, data=ddm,family = "nbinom")
poppoly <- glmmadmb(Offspring~Treatment  + poly(as.numeric(Generation),3), random = ~1|ID, data=ddm,family = "nbinom")
popfac <- glmmadmb(Offspring~Treatment  + Generation, random = ~1|ID, data=ddm,family = "nbinom")
write_csv(summary(poplin$coefficients),"Data/poplin.csv")
write_csv(data.frame(summary(poplin$coefficients)),"Data/poplin.csv")
data.frame(summary(poplin$coefficients))
data.frame(summary(poplin)$coefficients)
write_csv(data.frame(summary(poplin)$coefficients),"Data/poplin.csv")
write_csv(summary(poplinint)$coefficients,"Data/poplinint.csv")
poplin <- read_csv("Data/poplin.csv")
poplin
write_csv(data.frame(summary(poplinint)$coefficients),"Data/poplinint.csv")
write_csv(data.frame(summary(poplinpoly)$coefficients),"Data/poplinpoly.csv")
write_csv(data.frame(summary(poplinfac)$coefficients),"Data/poplinfac.csv")
write_csv(data.frame(summary(popfac)$coefficients),"Data/popfac.csv")
write_csv(data.frame(summary(poppoly)$coefficients),"Data/poppoly.csv")
poplin <- read_csv("Data/poplin.csv")
poplinint <- read_csv("Data/poplinint.csv")
poppoly <- read_csv("Data/poppoly.csv")
popfac <- read_csv("Data/popfac.csv")
round3(popfac["TreatmentPolyandrous","Pr(>|z|)"])
# Standard error ----------------------------------------------------------
se <- function(x) sd(x)/sqrt(length(x))
# Rounding ----------------------------------------------------------------
#Round to 2 or 3 dp and keep trailing zeros
round2 <- function(x,lessthan=F)
{
if(lessthan == T && x < 0.01)
{
return('< 0.01')
} else
{
sprintf(round(x,2), fmt="%.2f")
}
}
round3 <- function(x,lessthan = T)
{
if(lessthan == T && x < 0.001)
{
return('< 0.001')
} else
{
sprintf(round(x,3), fmt="%.3f")
}
}
# Numbers to words --------------------------------------------------------
num2word <- function(x)
{
numbers <- c("one","two","three","four","five","six","seven","eight","nine")
if(x < 10)
{
return(numbers[x])
} else
{
return(as.character(x))
}
}
# Overdispersion ----------------------------------------------------------
overdisp_fun <- function(model) {
rdf <- df.residual(model)
rp <- residuals(model,type="pearson")
Pearson.chisq <- sum(rp^2)
prat <- Pearson.chisq/rdf
pval <- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE)
c(chisq=Pearson.chisq,ratio=prat,rdf=rdf,p=pval)
}
round3(popfac["TreatmentPolyandrous","Pr(>|z|)"])
popfac
popfac["TreatmentPolyandrous","Pr...z.."]
popfac
popfac
popfac <- read_csv("Data/popfac.csv")
popfac
?write_csv
?data.frame
poplin <- glmmadmb(Offspring~Treatment  + as.numeric(Generation), random = ~1|ID, data=ddm,family = "nbinom")
?tibble
summary(poplin) %>%
tibble()
summary(poplin)$coefficients %>%
tibble()
summary(poplin)$coefficients %>%
as_tibble(rownames = "x")
summary(poplin)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/poplin.csv")
# Fast models -------------------------------------------------------------
survall <- coxph(Surv(time = dd$SurvTime,event = dd$Cens)~Treatment,data=dd)
surv1 <- coxph(Surv(time = dd1$SurvTime,event = dd1$Cens)~Treatment,data=dd1)
pop10 <- glm.nb(Offspring_Gen10~Treatment,data=dd10)
pop1 <- glm.nb(Offspring_Gen1~Treatment,data=dd1)
# Slow models - only run if updating --------------------------------------
poplin <- glmmadmb(Offspring~Treatment  + as.numeric(Generation), random = ~1|ID, data=ddm,family = "nbinom")
poplinint <- glmmadmb(Offspring~Treatment  * as.numeric(Generation), random = ~1|ID, data=ddm,family = "nbinom")
poppoly <- glmmadmb(Offspring~Treatment  + poly(as.numeric(Generation),3), random = ~1|ID, data=ddm,family = "nbinom")
popfac <- glmmadmb(Offspring~Treatment  + Generation, random = ~1|ID, data=ddm,family = "nbinom")
summary(poplin)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/poplin.csv")
summary(poplinint)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/poplinint.csv")
summary(poppoly)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/poppoly.csv")
summary(popfac)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/popfac.csv")
poplin <- read_csv("Data/poplin.csv")
poplinint <- read_csv("Data/poplinint.csv")
poppoly <- read_csv("Data/poppoly.csv")
popfac <- read_csv("Data/popfac.csv")
popfac[x == "TreatmentPolyandrous","Pr...z.."]
popfac
filter(popfac,x == "TreatmentPolyandrous")$`Pr(>|z|)`
round3(filter(popfac,x == "TreatmentPolyandrous")$`Pr(>|z|)`)
rm(list=ls())
#Load knitr
library(knitr)
#Set some options
options(na.action='na.fail')
opts_knit$set(root.dir = '..')
opts_chunk$set(echo=FALSE,
warning=FALSE,
message=FALSE,
fig.width=5,
fig.height=4)
set.seed(181219)
t1 <- poplin
poplin
library(tidyverse)
library(cowplot)
library(survival)
library(lme4)
library(glmmADMB)
library(MASS)
# Run if data updated on google sheets ------------------------------------
# library(googledrive)
# library(googlesheets4)
# temp <- drive_get("Tribolium_MoPo_Colonisation") %>%
#   read_sheet()
# write_csv(temp,"Data/Tribolium_MoPo_Colonisation.csv")
# rm(temp)
# Load data ---------------------------------------------------------------
dd <- read_csv("Data/Tribolium_MoPo_Colonisation.csv")
# Load model outputs (see models script) ----------------------------------
poplin <- read_csv("Data/poplin.csv")
poplinint <- read_csv("Data/poplinint.csv")
poppoly <- read_csv("Data/poppoly.csv")
popfac <- read_csv("Data/popfac.csv")
# Get rid of missing populations ------------------------------------------
dd <- dd[complete.cases(dd),]
dd$ID <- factor(dd$ID)
# Define number of generations --------------------------------------------
ngens <- length(grep("Offspring",colnames(dd)))
# Create and set a theme --------------------------------------------------
theme_lgs <- theme_bw()
theme_set(theme_lgs)
mycols <- c("dodgerblue3","darkorange")
# Generate long data frame ------------------------------------------------
ddlong <- dd%>%
gather(key = Generation, value = Offspring, paste0("Offspring_Gen",c(1:ngens))) %>%
mutate(Generation = str_split(Generation, "Gen",simplify = T)[,2])
ddlong$Generation <- factor(ddlong$Generation, levels = as.character(c(1:10)))
# Survival ----------------------------------------------------------------
temp <- dd
temp$Offspring_Gen11 <- 0
temp$SurvivalTime <- NA
for(i in 1:nrow(temp))
{
temp$SurvivalTime[i] <- min(which(temp[i,] == 0))-5
}
dd$Cens <- ifelse(temp$SurvivalTime == 11,0,1)
dd$SurvTime <- temp$SurvivalTime
temp <- NULL
# Subset removing first gen extinctions -----------------------------------
ddm <- filter(ddlong,Offspring > 0)
dd1 <- filter(dd,Offspring_Gen1 > 0)
dd10 <- filter(dd,Offspring_Gen10 > 0)
ddlong$RID <- c(1:nrow(ddlong))
ddm$RID <- c(1:nrow(ddm))
# Rates of change ---------------------------------------------------------
x1 <- dd[,grepl(paste0("Gen",c(1:9),"$",collapse = "|"),colnames(dd))]
x2 <- dd[,grepl(paste0("Gen",c(2:10),"$",collapse = "|"),colnames(dd))]
ch <- cbind(dd[,c("ID","Treatment")],x2-x1) %>%
gather(key = Generation, value = Offspring, paste0("Offspring_Gen",c(2:10))) %>%
mutate(Generation = str_split(Generation, "Gen",simplify = T)[,2])
ch$Generation <- factor(ch$Generation, levels = as.character(c(2:10)))
# Fast models -------------------------------------------------------------
survall <- coxph(Surv(time = dd$SurvTime,event = dd$Cens)~Treatment,data=dd)
surv1 <- coxph(Surv(time = dd1$SurvTime,event = dd1$Cens)~Treatment,data=dd1)
pop10 <- glm.nb(Offspring_Gen10~Treatment,data=dd10)
pop1 <- glm.nb(Offspring_Gen1~Treatment,data=dd1)
# Slow models - only run if updating --------------------------------------
# poplin <- glmmadmb(Offspring~Treatment  + as.numeric(Generation), random = ~1|ID, data=ddm,family = "nbinom")
# poplinint <- glmmadmb(Offspring~Treatment  * as.numeric(Generation), random = ~1|ID, data=ddm,family = "nbinom")
# poppoly <- glmmadmb(Offspring~Treatment  + poly(as.numeric(Generation),3), random = ~1|ID, data=ddm,family = "nbinom")
# popfac <- glmmadmb(Offspring~Treatment  + Generation, random = ~1|ID, data=ddm,family = "nbinom")
#
# summary(poplin)$coefficients %>%
#   as_tibble(rownames = "x") %>%
#   write_csv("Data/poplin.csv")
#
# summary(poplinint)$coefficients %>%
#   as_tibble(rownames = "x") %>%
#   write_csv("Data/poplinint.csv")
#
# summary(poppoly)$coefficients %>%
#   as_tibble(rownames = "x") %>%
#   write_csv("Data/poppoly.csv")
#
# summary(popfac)$coefficients %>%
#   as_tibble(rownames = "x") %>%
#   write_csv("Data/popfac.csv")
rm(list=ls())
#Load knitr
library(knitr)
#Set some options
options(na.action='na.fail')
opts_knit$set(root.dir = '..')
opts_chunk$set(echo=FALSE,
warning=FALSE,
message=FALSE,
fig.width=5,
fig.height=4)
set.seed(181219)
#Load and clean data
source("Scripts/TriboliumSexCol_LOAD.R")
source("Scripts/TriboliumSexCol_FUNCTIONS.r")
source("Scripts/TriboliumSexCol_CLEAN.r")
source("Scripts/TriboliumSexCol_MODELS.r")
t1 <- poplin %>%
rbind(filter(poplinint,x == "TreatmentPolyandrous:as.numeric(Generation)")) %>%
mutate(x = replace(x, x %in% c( "TreatmentPolyandrous","as.numeric(Generation)","4"),c("Treatment","Generation","Treatment x Generation"))) %>%
dplyr::select(" " = "x", Estimate, "SE" = "Std..Error","P" =  "Pr...z..") %>%
mutate(P = sapply(P,round3)) %>%
kable(digits = 3)
poplin %>%
rbind(filter(poplinint,x == "TreatmentPolyandrous:as.numeric(Generation)")) %>%
mutate(x = replace(x, x %in% c( "TreatmentPolyandrous","as.numeric(Generation)","4"),c("Treatment","Generation","Treatment x Generation")))
t1 <- poplin %>%
rbind(filter(poplinint,x == "TreatmentPolyandrous:as.numeric(Generation)")) %>%
mutate(x = replace(x, x %in% c( "TreatmentPolyandrous","as.numeric(Generation)","4"),c("Treatment","Generation","Treatment x Generation"))) %>%
dplyr::select(" " = "x", Estimate, "SE" = "Std.Error","P" =  "Pr(>|z|)") %>%
mutate(P = sapply(P,round3)) %>%
kable(digits = 3)
poplin %>%
rbind(filter(poplinint,x == "TreatmentPolyandrous:as.numeric(Generation)")) %>%
mutate(x = replace(x, x %in% c( "TreatmentPolyandrous","as.numeric(Generation)","4"),c("Treatment","Generation","Treatment x Generation")))
t1 <- poplin %>%
rbind(filter(poplinint,x == "TreatmentPolyandrous:as.numeric(Generation)")) %>%
mutate(x = replace(x, x %in% c( "TreatmentPolyandrous","as.numeric(Generation)","4"),c("Treatment","Generation","Treatment x Generation"))) %>%
dplyr::select(" " = "x", Estimate, "SE" = "Std. Error","P" =  "Pr(>|z|)") %>%
mutate(P = sapply(P,round3)) %>%
kable(digits = 3)
t1
t1 <- poplin %>%
rbind(filter(poplinint,x == "TreatmentPolyandrous:as.numeric(Generation)")) %>%
mutate(x = replace(x, x %in% c( "TreatmentPolyandrous","as.numeric(Generation)","TreatmentPolyandrous:as.numeric(Generation)"),c("Treatment","Generation","Treatment x Generation"))) %>%
dplyr::select(" " = "x", Estimate, "SE" = "Std. Error","P" =  "Pr(>|z|)") %>%
mutate(P = sapply(P,round3)) %>%
kable(digits = 3)
t1
filter(popfac,x == "TreatmentPolyandrous")$"Pr(>|z|)")
filter(popfac,x == "TreatmentPolyandrous")$"Pr(>|z|)"
dd <- data.frame(x = rnorm(300,mean=15,sd = 3),
g = rep(c('a','b','c'),each = 100))
library(tidyverse)
ggplot(dd,aes(x = x,fil = g))+
geom_density()+
theme_bw()+
scale_fill_manual(values = c('red','blue'.'yellow'))
ggplot(dd,aes(x = x,fil = g))+
geom_density()+
theme_bw()+
scale_fill_manual(values = c('red','blue','yellow'))
ggplot(dd,aes(x = x,fill = g))+
geom_density()+
theme_bw()+
scale_fill_manual(values = c('red','blue','yellow'))
ggplot(dd,aes(x = x,fill = g))+
geom_density()+
theme_bw()+
scale_fill_manual(values = c('red','blue','yellow'),alpha = 0.4)
ggplot(dd,aes(x = x,fill = g))+
geom_density(alpha = 0.4)+
theme_bw()+
scale_fill_manual(values = c('red','blue','yellow'))
