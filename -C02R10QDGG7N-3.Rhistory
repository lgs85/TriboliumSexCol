rdf <- df.residual(model)
rp <- residuals(model,type="pearson")
Pearson.chisq <- sum(rp^2)
prat <- Pearson.chisq/rdf
pval <- pchisq(Pearson.chisq, df=rdf, lower.tail=FALSE)
c(chisq=Pearson.chisq,ratio=prat,rdf=rdf,p=pval)
}
survall <- coxph(Surv(time = dd$SurvTime,event = dd$Cens)~Treatment,data=dd)
surv1 <- coxph(Surv(time = dd1$SurvTime,event = dd1$Cens)~Treatment,data=dd1)
pop10 <- glm.nb(Offspring_Gen10~Treatment,data=dd10)
pop1 <- glm.nb(Offspring_Gen1~Treatment,data=dd1)
?glmmadmb
poplinint <- glmmadmb(Offspring~Treatment  * as.numeric(Generation),  +(1|ID), data=ddm,family = "nbinom")
ddm
poplinint <- glmmadmb(Offspring~Treatment  * as.numeric(Generation),  + (1|ID), data=ddm,family = "nbinom")
poplinint <- glmmadmb(Offspring~Treatment  * as.numeric(Generation)  + (1|ID), data=ddm,family = "nbinom")
poplinint <- glmmadmb(Offspring~Treatment  * as.numeric(Generation) + (1|ID) + (1|factor(Generation)), data=ddm,family = "nbinom")
poplinint <- glmmadmb(Offspring~Treatment  * as.numeric(Generation) + (1|ID) + (1|factor(Generation)), data=ddm,family = "nbinom")
poplinint <- glmmadmb(Offspring~Treatment  * as.numeric(Generation) + (1|ID) + (1|Generation), data=ddm,family = "nbinom")
summary(poplinint)
poplin <- glmmadmb(Offspring~Treatment  + as.numeric(Generation) + (1|ID) + (1|Generation), data=ddm,family = "nbinom")
summary(poplin)
poppoly <- glmmadmb(Offspring~Treatment  + poly(as.numeric(Generation) + (1|ID) + (1|Generation), data=ddm,family = "nbinom")
popfac <- glmmadmb(Offspring~Treatment  + Generation + (1|ID) + (1|Generation), data=ddm,family = "nbinom")
summary(poplin)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/poplin.csv")
summary(poplinint)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/poplinint.csv")
summary(poppoly)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/poppoly.csv")
summary(popfac)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/popfac.csv")
poppoly <- glmmadmb(Offspring~Treatment  + poly(as.numeric(Generation)) + (1|ID) + (1|Generation), data=ddm,family = "nbinom")
popfac <- glmmadmb(Offspring~Treatment  + Generation + (1|ID) + (1|Generation), data=ddm,family = "nbinom")
summary(poplin)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/poplin.csv")
summary(poplinint)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/poplinint.csv")
summary(poppoly)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/poppoly.csv")
summary(popfac)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/popfac.csv")
summary(poplin)
summary(poplinint)
summary(poppoly)
summary(popfac)
poplin <- glmmadmb(Offspring~Treatment  + as.numeric(Generation) + (1|ID) + (1|Generation) + (Treatment|Generation), data=ddm,family = "nbinom")
poplin <- glmmadmb(Offspring~Treatment  + as.numeric(Generation) + (1|ID) + (1|Generation) + (as.numeric(Generation)|Treatment), data=ddm,family = "nbinom")
poplin <- glmmadmb(Offspring~Treatment  + as.numeric(Generation) + (1|ID) + (1|Generation) + (as.numeric(Generation)|ID), data=ddm,family = "nbinom")
poplin <- glmmadmb(Offspring~Treatment  + as.numeric(Generation) + (1|ID) + (1|Generation) + (as.numeric(Generation)|ID), data=ddm,family = "nbinom")
library(tidyverse)
library(cowplot)
library(survival)
library(lme4)
library(glmmADMB)
library(MASS)
# Run if data updated on google sheets ------------------------------------
# library(googledrive)
# library(googlesheets4)
# temp <- drive_get("Tribolium_MoPo_Colonisation") %>%
#   read_sheet()
# write_csv(temp,"Data/Tribolium_MoPo_Colonisation.csv")
# rm(temp)
# Load data ---------------------------------------------------------------
dd <- read_csv("Data/Tribolium_MoPo_Colonisation.csv")
# Load model outputs (see models script) ----------------------------------
poplin <- read_csv("Data/poplin.csv")
poplinint <- read_csv("Data/poplinint.csv")
poppoly <- read_csv("Data/poppoly.csv")
popfac <- read_csv("Data/popfac.csv")
# Get rid of missing populations ------------------------------------------
dd <- dd[complete.cases(dd),]
dd$ID <- factor(dd$ID)
# Define number of generations --------------------------------------------
ngens <- length(grep("Offspring",colnames(dd)))
# Create and set a theme --------------------------------------------------
theme_lgs <- theme_bw()
theme_set(theme_lgs)
mycols <- c("dodgerblue3","darkorange")
# Generate long data frame ------------------------------------------------
ddlong <- dd%>%
gather(key = Generation, value = Offspring, paste0("Offspring_Gen",c(1:ngens))) %>%
mutate(Generation = str_split(Generation, "Gen",simplify = T)[,2])
ddlong$Generation <- factor(ddlong$Generation, levels = as.character(c(1:10)))
# Survival ----------------------------------------------------------------
temp <- dd
temp$Offspring_Gen11 <- 0
temp$SurvivalTime <- NA
for(i in 1:nrow(temp))
{
temp$SurvivalTime[i] <- min(which(temp[i,] == 0))-5
}
dd$Cens <- ifelse(temp$SurvivalTime == 11,0,1)
dd$SurvTime <- temp$SurvivalTime
temp <- NULL
# Subset removing first gen extinctions -----------------------------------
ddm <- filter(ddlong,Offspring > 0)
dd1 <- filter(dd,Offspring_Gen1 > 0)
dd10 <- filter(dd,Offspring_Gen10 > 0)
ddlong$RID <- c(1:nrow(ddlong))
ddm$RID <- c(1:nrow(ddm))
# Rates of change ---------------------------------------------------------
x1 <- dd[,grepl(paste0("Gen",c(1:9),"$",collapse = "|"),colnames(dd))]
x2 <- dd[,grepl(paste0("Gen",c(2:10),"$",collapse = "|"),colnames(dd))]
ch <- cbind(dd[,c("ID","Treatment")],x2-x1) %>%
gather(key = Generation, value = Offspring, paste0("Offspring_Gen",c(2:10))) %>%
mutate(Generation = str_split(Generation, "Gen",simplify = T)[,2])
ch$Generation <- factor(ch$Generation, levels = as.character(c(2:10)))
library(tidyverse)
library(cowplot)
library(survival)
library(lme4)
library(glmmADMB)
library(MASS)
# Run if data updated on google sheets ------------------------------------
# library(googledrive)
# library(googlesheets4)
# temp <- drive_get("Tribolium_MoPo_Colonisation") %>%
#   read_sheet()
# write_csv(temp,"Data/Tribolium_MoPo_Colonisation.csv")
# rm(temp)
# Load data ---------------------------------------------------------------
dd <- read_csv("Data/Tribolium_MoPo_Colonisation.csv")
# Load model outputs (see models script) ----------------------------------
poplin <- read_csv("Data/poplin.csv")
poplinint <- read_csv("Data/poplinint.csv")
poppoly <- read_csv("Data/poppoly.csv")
popfac <- read_csv("Data/popfac.csv")
# Get rid of missing populations ------------------------------------------
dd <- dd[complete.cases(dd),]
dd$ID <- factor(dd$ID)
# Define number of generations --------------------------------------------
ngens <- length(grep("Offspring",colnames(dd)))
# Create and set a theme --------------------------------------------------
theme_lgs <- theme_bw()
theme_set(theme_lgs)
mycols <- c("dodgerblue3","darkorange")
# Generate long data frame ------------------------------------------------
ddlong <- dd%>%
gather(key = Generation, value = Offspring, paste0("Offspring_Gen",c(1:ngens))) %>%
mutate(Generation = str_split(Generation, "Gen",simplify = T)[,2])
ddlong$Generation <- factor(ddlong$Generation, levels = as.character(c(1:10)))
# Survival ----------------------------------------------------------------
temp <- dd
temp$Offspring_Gen11 <- 0
temp$SurvivalTime <- NA
for(i in 1:nrow(temp))
{
temp$SurvivalTime[i] <- min(which(temp[i,] == 0))-5
}
dd$Cens <- ifelse(temp$SurvivalTime == 11,0,1)
dd$SurvTime <- temp$SurvivalTime
temp <- NULL
# Subset removing first gen extinctions -----------------------------------
ddm <- filter(ddlong,Offspring > 0)
dd1 <- filter(dd,Offspring_Gen1 > 0)
dd10 <- filter(dd,Offspring_Gen10 > 0)
ddlong$RID <- c(1:nrow(ddlong))
ddm$RID <- c(1:nrow(ddm))
# Rates of change ---------------------------------------------------------
x1 <- dd[,grepl(paste0("Gen",c(1:9),"$",collapse = "|"),colnames(dd))]
x2 <- dd[,grepl(paste0("Gen",c(2:10),"$",collapse = "|"),colnames(dd))]
ch <- cbind(dd[,c("ID","Treatment")],x2-x1) %>%
gather(key = Generation, value = Offspring, paste0("Offspring_Gen",c(2:10))) %>%
mutate(Generation = str_split(Generation, "Gen",simplify = T)[,2])
ch$Generation <- factor(ch$Generation, levels = as.character(c(2:10)))
poplin <- glmmadmb(Offspring~Treatment  + as.numeric(Generation) + (1|ID) + (1|Generation) + (as.numeric(Generation)|ID), data=ddm,family = "nbinom")
ddm$GenN <- as.numeric(ddm$Generation)
ddm
poplin <- glmmadmb(Offspring~Treatment  + as.numeric(Generation) + (1|ID) + (1|Generation) + (GenN|ID), data=ddm,family = "nbinom")
sumary(poplin)
summary(poplin)
poplin <- glmmadmb(Offspring~Treatment  + as.numeric(Generation) + (1|Generation/ID), data=ddm,family = "nbinom")
summary(poplin)
rm(list=ls())
#Load knitr
library(knitr)
#Set some options
options(na.action='na.fail')
opts_knit$set(root.dir = '..')
opts_chunk$set(echo=FALSE,
warning=FALSE,
message=FALSE,
fig.width=5,
fig.height=4)
set.seed(181219)
source("Scripts/TriboliumSexCol_LOAD.R")
source("Scripts/TriboliumSexCol_LOAD.R")
source("Scripts/TriboliumSexCol_FUNCTIONS.r")
source("Scripts/TriboliumSexCol_CLEAN.r")
# Fast models -------------------------------------------------------------
survall <- coxph(Surv(time = dd$SurvTime,event = dd$Cens)~Treatment,data=dd)
surv1 <- coxph(Surv(time = dd1$SurvTime,event = dd1$Cens)~Treatment,data=dd1)
pop10 <- glm.nb(Offspring_Gen10~Treatment,data=dd10)
pop1 <- glm.nb(Offspring_Gen1~Treatment,data=dd1)
ddm$GenN <- as.numeric(ddm$Generation)
poplin <- glmmadmb(Offspring~Treatment  + as.numeric(Generation) + (1+GenN|ID)+(1|Generation), data=ddm,family = "nbinom")
summary(poplin)
poplin <- glmer(Offspring~Treatment  + as.numeric(Generation) + (1+GenN|ID)+(1|Generation), data=ddm,family = "poisson")
summary(poplin)
poplin <- glmer(Offspring~Treatment  + GenN + (1+GenN|ID)+(1|Generation), data=ddm,family = "poisson")
summary(poplin)
poplin <- glmer(Offspring~Treatment  + GenN + (1+GenN|ID)+(1|Generation), data=ddm,family = "poisson")
summary(poplin)
overdisp_fun(poplin)
poplin <- glmmadmb(Offspring~Treatment  + GenN + (1+GenN|ID) + (1|Generation), data=ddm,family = "nbinom")
summary(poplin)
overdisp_fun(poplin)
poplin <- glmmadmb(Offspring~Treatment  * GenN + (1+GenN|ID) + (1|Generation), data=ddm,family = "nbinom")
summary(poplin)
overdisp_fun(poplin)
summary(poplin)
overdisp_fun(poplin)
poplin <- glmmadmb(Offspring~Treatment + (1+GenN|ID) + (1|Generation), data=ddm,family = "nbinom")
summary(poplin)
rm(list=ls())
#Load knitr
library(knitr)
#Set some options
options(na.action='na.fail')
opts_knit$set(root.dir = '..')
opts_chunk$set(echo=FALSE,
warning=FALSE,
message=FALSE,
fig.width=5,
fig.height=4)
set.seed(181219)
#Load and clean data
source("Scripts/TriboliumSexCol_LOAD.R")
source("Scripts/TriboliumSexCol_FUNCTIONS.r")
source("Scripts/TriboliumSexCol_CLEAN.r")
source("Scripts/TriboliumSexCol_MODELS.r")
testInheritedMethods()
ddm %>%
ggplot(aes(x = Generation,y = Offspring,col = Treatment)) +
geom_line(aes(group = ID),alpha = 0.2)+
geom_smooth(aes(x = as.numeric(Generation)),method = "lm",method.args = list(y~poly(x,3)),se = T) +
ylab("Number of adults")+
theme(legend.position = "none")+
scale_colour_manual(values = mycols)
FigA <- ddlong %>%
drop_na() %>%
group_by(Generation, Treatment) %>%
summarise(Extant = mean(Offspring > 0)) %>%
ggplot(aes(x = Generation, y = Extant, col = Treatment))+
geom_line(aes(group = Treatment))+
ylab("Proportion of populations surviving")+
scale_colour_manual(values = mycols)+
theme(legend.position = "none")
FigB <- ddm %>%
ggplot(aes(x = Generation,y = Offspring,col = Treatment)) +
geom_line(aes(group = ID),alpha = 0.2)+
geom_smooth(aes(x = as.numeric(Generation)),method = "lm",method.args = list(formula = y~poly(x,3)),se = T) +
ylab("Number of adults")+
theme(legend.position = "none")+
scale_colour_manual(values = mycols)
plots <- plot_grid(FigA, FigB, labels = "AUTO")
legend_b <- get_legend(
FigA +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
)
plot_grid(legend_b, plots, ncol = 1, rel_heights = c(0.1, 1))
poplin <- glmmadmb(Offspring~Treatment  + GenN + (1+GenN|ID), data=ddm,family = "nbinom")
summary(poplin)
poppoly <- glmmadmb(Offspring~Treatment  + poly(as.numeric(Generation),3)  + (1+GenN|ID) + (1|Generation), data=ddm,family = "nbinom")
poppoly <- glmmadmb(Offspring~Treatment  + poly(GenN,3)  + (1+poly(GenN,3)|ID), data=ddm,family = "nbinom")
ddm
poppoly <- glmmadmb(Offspring~Treatment  + poly(GenN,3,raw = T)  + (1+poly(GenN,3,raw = T)|ID), data=ddm,family = "nbinom")
poppoly <- glmmadmb(Offspring~Treatment  + poly(GenN,3,raw = T)  + (1+GenN|ID), data=ddm,family = "nbinom")
summary(poppoly)
poplinint <- glmmadmb(Offspring~Treatment  * GenN  + (1+GenN|ID), data=ddm,family = "nbinom")
summary(poplinint)
# Fast models -------------------------------------------------------------
survall <- coxph(Surv(time = dd$SurvTime,event = dd$Cens)~Treatment,data=dd)
surv1 <- coxph(Surv(time = dd1$SurvTime,event = dd1$Cens)~Treatment,data=dd1)
pop10 <- glm.nb(Offspring_Gen10~Treatment,data=dd10)
pop1 <- glm.nb(Offspring_Gen1~Treatment,data=dd1)
# Slow models - only run if updating --------------------------------------
ddm$GenN <- as.numeric(ddm$Generation)
poplin <- glmmadmb(Offspring~Treatment  + GenN + (1+GenN|ID), data=ddm,family = "nbinom")
poplinint <- glmmadmb(Offspring~Treatment  * GenN  + (1+GenN|ID), data=ddm,family = "nbinom")
poppoly <- glmmadmb(Offspring~Treatment  + poly(GenN,3,raw = T)  + (1+GenN|ID), data=ddm,family = "nbinom")
popfac <- glmmadmb(Offspring~Treatment  + Generation +  (1+GenN|ID), data=ddm,family = "nbinom")
summary(poplin)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/poplin.csv")
summary(poplinint)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/poplinint.csv")
summary(poppoly)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/poppoly.csv")
summary(popfac)$coefficients %>%
as_tibble(rownames = "x") %>%
write_csv("Data/popfac.csv")
FigA <- ddlong %>%
drop_na() %>%
group_by(Generation, Treatment) %>%
summarise(Extant = mean(Offspring > 0)) %>%
ggplot(aes(x = Generation, y = Extant, col = Treatment))+
geom_line(aes(group = Treatment))+
ylab("Proportion of populations surviving")+
scale_colour_manual(values = mycols)+
theme(legend.position = "none")
FigB <- ddm %>%
ggplot(aes(x = Generation,y = Offspring,col = Treatment)) +
geom_line(aes(group = ID),alpha = 0.2)+
geom_smooth(aes(x = as.numeric(Generation)),method = "glm.nb",formula = y~poly(x,3)),se = T) +
FigA <- ddlong %>%
drop_na() %>%
group_by(Generation, Treatment) %>%
summarise(Extant = mean(Offspring > 0)) %>%
ggplot(aes(x = Generation, y = Extant, col = Treatment))+
geom_line(aes(group = Treatment))+
ylab("Proportion of populations surviving")+
scale_colour_manual(values = mycols)+
theme(legend.position = "none")
FigB <- ddm %>%
ggplot(aes(x = Generation,y = Offspring,col = Treatment)) +
geom_line(aes(group = ID),alpha = 0.2)+
geom_smooth(aes(x = as.numeric(Generation)),method = "glm.nb",formula = y~poly(x,3),se = T) +
ylab("Number of adults")+
theme(legend.position = "none")+
scale_colour_manual(values = mycols)
plots <- plot_grid(FigA, FigB, labels = "AUTO")
legend_b <- get_legend(
FigA +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
)
plot_grid(legend_b, plots, ncol = 1, rel_heights = c(0.1, 1))
FigA <- ddlong %>%
drop_na() %>%
group_by(Generation, Treatment) %>%
summarise(Extant = mean(Offspring > 0)) %>%
ggplot(aes(x = Generation, y = Extant, col = Treatment))+
geom_line(aes(group = Treatment))+
ylab("Proportion of populations surviving")+
scale_colour_manual(values = mycols)+
theme(legend.position = "none")
FigB <- ddm %>%
ggplot(aes(x = Generation,y = Offspring,col = Treatment)) +
geom_line(aes(group = ID),alpha = 0.2)+
geom_smooth(aes(x = as.numeric(Generation)),method = "glm.nb",formula = y~poly(x,5),se = T) +
ylab("Number of adults")+
theme(legend.position = "none")+
scale_colour_manual(values = mycols)
plots <- plot_grid(FigA, FigB, labels = "AUTO")
legend_b <- get_legend(
FigA +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
)
plot_grid(legend_b, plots, ncol = 1, rel_heights = c(0.1, 1))
aic(glm.nb(Offspring~GenN,data=ddm))
AIC(glm.nb(Offspring~GenN,data=ddm))
AIC(glm.nb(Offspring~poly(GenN,2),data=ddm))
AIC(glm.nb(Offspring~poly(GenN,3),data=ddm))
AIC(glm.nb(Offspring~poly(GenN,4),data=ddm))
AIC(glm.nb(Offspring~poly(GenN,5),data=ddm))
AIC(glm.nb(Offspring~poly(GenN,6),data=ddm))
AIC(glm.nb(Offspring~poly(GenN,7),data=ddm))
FigA <- ddlong %>%
drop_na() %>%
group_by(Generation, Treatment) %>%
summarise(Extant = mean(Offspring > 0)) %>%
ggplot(aes(x = Generation, y = Extant, col = Treatment))+
geom_line(aes(group = Treatment))+
ylab("Proportion of populations surviving")+
scale_colour_manual(values = mycols)+
theme(legend.position = "none")
FigB <- ddm %>%
ggplot(aes(x = Generation,y = Offspring,col = Treatment)) +
geom_line(aes(group = ID),alpha = 0.2)+
geom_smooth(aes(x = as.numeric(Generation)),method = "glm.nb",formula = y~poly(x,4),se = T) +
ylab("Number of adults")+
theme(legend.position = "none")+
scale_colour_manual(values = mycols)
plots <- plot_grid(FigA, FigB, labels = "AUTO")
legend_b <- get_legend(
FigA +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
)
plot_grid(legend_b, plots, ncol = 1, rel_heights = c(0.1, 1))
FigA <- ddlong %>%
drop_na() %>%
group_by(Generation, Treatment) %>%
summarise(Extant = mean(Offspring > 0)) %>%
ggplot(aes(x = Generation, y = Extant, col = Treatment))+
geom_line(aes(group = Treatment))+
ylab("Proportion of populations surviving")+
scale_colour_manual(values = mycols)+
theme(legend.position = "none")
FigB <- ddm %>%
ggplot(aes(x = Generation,y = Offspring,col = Treatment)) +
geom_line(aes(group = ID),alpha = 0.2)+
geom_smooth(aes(x = as.numeric(Generation)),method = "glm.nb",formula = y~poly(x,7),se = T) +
ylab("Number of adults")+
theme(legend.position = "none")+
scale_colour_manual(values = mycols)
plots <- plot_grid(FigA, FigB, labels = "AUTO")
legend_b <- get_legend(
FigA +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
)
plot_grid(legend_b, plots, ncol = 1, rel_heights = c(0.1, 1))
FigA <- ddlong %>%
drop_na() %>%
group_by(Generation, Treatment) %>%
summarise(Extant = mean(Offspring > 0)) %>%
ggplot(aes(x = Generation, y = Extant, col = Treatment))+
geom_line(aes(group = Treatment))+
ylab("Proportion of populations surviving")+
scale_colour_manual(values = mycols)+
theme(legend.position = "none")
FigB <- ddm %>%
ggplot(aes(x = Generation,y = Offspring,col = Treatment)) +
geom_line(aes(group = ID),alpha = 0.2)+
geom_smooth(aes(x = as.numeric(Generation)),method = "glm.nb",formula = y~poly(x,5),se = T) +
ylab("Number of adults")+
theme(legend.position = "none")+
scale_colour_manual(values = mycols)
plots <- plot_grid(FigA, FigB, labels = "AUTO")
legend_b <- get_legend(
FigA +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
)
plot_grid(legend_b, plots, ncol = 1, rel_heights = c(0.1, 1))
FigA <- ddlong %>%
drop_na() %>%
group_by(Generation, Treatment) %>%
summarise(Extant = mean(Offspring > 0)) %>%
ggplot(aes(x = Generation, y = Extant, col = Treatment))+
geom_line(aes(group = Treatment))+
ylab("Proportion of populations surviving")+
scale_colour_manual(values = mycols)+
theme(legend.position = "none")
FigB <- ddm %>%
ggplot(aes(x = Generation,y = Offspring,col = Treatment)) +
geom_line(aes(group = ID),alpha = 0.2)+
geom_smooth(aes(x = as.numeric(Generation)),method = "glm.nb",formula = y~poly(x,3),se = T) +
ylab("Number of adults")+
theme(legend.position = "none")+
scale_colour_manual(values = mycols)
plots <- plot_grid(FigA, FigB, labels = "AUTO")
legend_b <- get_legend(
FigA +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
)
plot_grid(legend_b, plots, ncol = 1, rel_heights = c(0.1, 1))
FigA <- ddlong %>%
drop_na() %>%
group_by(Generation, Treatment) %>%
summarise(Extant = mean(Offspring > 0)) %>%
ggplot(aes(x = Generation, y = Extant, col = Treatment))+
geom_line(aes(group = Treatment))+
ylab("Proportion of populations surviving")+
scale_colour_manual(values = mycols)+
theme(legend.position = "none")
FigB <- ddm %>%
ggplot(aes(x = Generation,y = Offspring,col = Treatment)) +
geom_line(aes(group = ID),alpha = 0.2)+
geom_smooth(aes(x = as.numeric(Generation)),method = "glm.nb",formula = y~poly(x,4),se = T) +
ylab("Number of adults")+
theme(legend.position = "none")+
scale_colour_manual(values = mycols)
plots <- plot_grid(FigA, FigB, labels = "AUTO")
legend_b <- get_legend(
FigA +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
)
plot_grid(legend_b, plots, ncol = 1, rel_heights = c(0.1, 1))
FigA <- ddlong %>%
drop_na() %>%
group_by(Generation, Treatment) %>%
summarise(Extant = mean(Offspring > 0)) %>%
ggplot(aes(x = Generation, y = Extant, col = Treatment))+
geom_line(aes(group = Treatment))+
ylab("Proportion of populations surviving")+
scale_colour_manual(values = mycols)+
theme(legend.position = "none")
FigB <- ddm %>%
ggplot(aes(x = Generation,y = Offspring,col = Treatment)) +
geom_line(aes(group = ID),alpha = 0.2)+
geom_smooth(aes(x = as.numeric(Generation)),method = "glm.nb",se = T) +
ylab("Number of adults")+
theme(legend.position = "none")+
scale_colour_manual(values = mycols)
plots <- plot_grid(FigA, FigB, labels = "AUTO")
legend_b <- get_legend(
FigA +
guides(color = guide_legend(nrow = 1)) +
theme(legend.position = "bottom")
)
plot_grid(legend_b, plots, ncol = 1, rel_heights = c(0.1, 1))
?include.graphics
library(knitr)
?include_graphics
